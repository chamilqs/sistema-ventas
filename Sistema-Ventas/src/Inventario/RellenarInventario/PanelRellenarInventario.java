/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Inventario.RellenarInventario;
import java.sql.Connection;
import Connect.Conexion;
import DAO.ProductoDAO;
import DAO.ProveedorDAO;
import DAOImpl.ProductoDAOImpl;
import DAOImpl.ProveedorDAOImpl;
import DTO.Producto;
import DTO.Proveedor;
import Inventario.DetalleInventario.PanelDetalleInventario;
import Utils.*;
import Utils.Utils.UniqueIDGenerator;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

/**
 *
 * @author baez_
 */
public class PanelRellenarInventario extends javax.swing.JPanel {
     LocalDateTime fecha;
     PanelDetalleInventario pdi;
    /**
     * Creates new form PanelRellenarInventario
     */
    public PanelRellenarInventario() {
        initComponents();
       Utils.setScaledImage(lblLogo, "inventario.png", 200, 200);
       DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
       fecha = LocalDateTime.now();
       
       generarIdCompra();
       
       lblFecha.setText("Fecha: " + formatter.format(fecha));

    }
    
    public PanelRellenarInventario(PanelDetalleInventario pdi) {
        initComponents();
       Utils.setScaledImage(lblLogo, "inventario.png", 200, 200);
       DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
       fecha = LocalDateTime.now();
       
       generarIdCompra();
       
       lblFecha.setText("Fecha: " + formatter.format(fecha));
       
       this.pdi = pdi;

    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        lblLogo = new javax.swing.JLabel();
        panelLateralDerecho = new javax.swing.JPanel();
        lblId1 = new javax.swing.JLabel();
        txtIdProducto = new javax.swing.JTextField();
        lblNombre1 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblPrecio1 = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        lblSize1 = new javax.swing.JLabel();
        txtCantidadEntrada = new javax.swing.JTextField();
        btnAgregar = new rojerusan.RSMaterialButtonRectangle();
        btnRellenar = new rojerusan.RSMaterialButtonRectangle();
        lblPrecio2 = new javax.swing.JLabel();
        lblSize2 = new javax.swing.JLabel();
        txtPrecioCompra = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        lblSize3 = new javax.swing.JLabel();
        txtIdProveedor = new javax.swing.JTextField();
        lblSize4 = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JTextField();
        btnEliminar = new rojerusan.RSMaterialButtonRectangle();
        lblFecha = new javax.swing.JLabel();
        lblPrecioTotalCompra = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblIdCompra = new javax.swing.JLabel();
        lblIdCompraG = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        content.setBackground(new java.awt.Color(24, 39, 72));
        content.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "descripcion", "Tamaño", "Cantidad", "Precio compra", "IdProveedor", "Proveedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.setToolTipText("");
        tableProductos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableProductos);
        if (tableProductos.getColumnModel().getColumnCount() > 0) {
            tableProductos.getColumnModel().getColumn(0).setResizable(false);
            tableProductos.getColumnModel().getColumn(0).setPreferredWidth(10);
            tableProductos.getColumnModel().getColumn(1).setResizable(false);
            tableProductos.getColumnModel().getColumn(2).setResizable(false);
            tableProductos.getColumnModel().getColumn(2).setPreferredWidth(30);
            tableProductos.getColumnModel().getColumn(3).setResizable(false);
            tableProductos.getColumnModel().getColumn(3).setPreferredWidth(10);
            tableProductos.getColumnModel().getColumn(4).setResizable(false);
            tableProductos.getColumnModel().getColumn(5).setResizable(false);
            tableProductos.getColumnModel().getColumn(5).setPreferredWidth(20);
            tableProductos.getColumnModel().getColumn(6).setResizable(false);
        }

        content.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 727, 570));

        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        content.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, 240, 150));

        panelLateralDerecho.setBackground(new java.awt.Color(255, 255, 255));
        panelLateralDerecho.setForeground(new java.awt.Color(51, 51, 51));
        panelLateralDerecho.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblId1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblId1.setForeground(new java.awt.Color(51, 51, 51));
        lblId1.setText("Id Producto");
        panelLateralDerecho.add(lblId1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, 20));

        txtIdProducto.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtIdProducto.setForeground(new java.awt.Color(51, 51, 51));
        txtIdProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtIdProducto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtIdProductoCaretUpdate(evt);
            }
        });
        panelLateralDerecho.add(txtIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 120, 20));

        lblNombre1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblNombre1.setForeground(new java.awt.Color(51, 51, 51));
        lblNombre1.setText("Descripcion");
        panelLateralDerecho.add(lblNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        txtDescripcion.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtDescripcion.setForeground(new java.awt.Color(51, 51, 51));
        txtDescripcion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtDescripcion.setEnabled(false);
        panelLateralDerecho.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 120, 20));

        lblPrecio1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblPrecio1.setForeground(new java.awt.Color(51, 51, 51));
        lblPrecio1.setText("Tamaño");
        panelLateralDerecho.add(lblPrecio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, 20));

        txtSize.setForeground(new java.awt.Color(51, 51, 51));
        txtSize.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtSize.setEnabled(false);
        panelLateralDerecho.add(txtSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 140, 20));

        lblSize1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblSize1.setForeground(new java.awt.Color(51, 51, 51));
        lblSize1.setText("Cant. Entrada");
        panelLateralDerecho.add(lblSize1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, 20));

        txtCantidadEntrada.setForeground(new java.awt.Color(51, 51, 51));
        txtCantidadEntrada.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtCantidadEntrada.setVerifyInputWhenFocusTarget(false);
        txtCantidadEntrada.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCantidadEntradaCaretUpdate(evt);
            }
        });
        panelLateralDerecho.add(txtCantidadEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 110, 20));

        btnAgregar.setBackground(new java.awt.Color(0, 204, 51));
        btnAgregar.setText("Agregar");
        btnAgregar.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });
        panelLateralDerecho.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 100, 40));

        btnRellenar.setBackground(new java.awt.Color(24, 39, 72));
        btnRellenar.setText("Rellenar");
        btnRellenar.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        btnRellenar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRellenarMouseClicked(evt);
            }
        });
        btnRellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRellenarActionPerformed(evt);
            }
        });
        panelLateralDerecho.add(btnRellenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 150, 40));

        lblPrecio2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblPrecio2.setForeground(new java.awt.Color(51, 51, 51));
        lblPrecio2.setText("Precio Compra");
        panelLateralDerecho.add(lblPrecio2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, 20));

        lblSize2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblSize2.setForeground(new java.awt.Color(51, 51, 51));
        lblSize2.setText("Monto total");
        panelLateralDerecho.add(lblSize2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, -1, 20));

        txtPrecioCompra.setForeground(new java.awt.Color(51, 51, 51));
        txtPrecioCompra.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtPrecioCompra.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtPrecioCompraCaretUpdate(evt);
            }
        });
        txtPrecioCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioCompraActionPerformed(evt);
            }
        });
        panelLateralDerecho.add(txtPrecioCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 100, 20));

        txtTotal.setForeground(new java.awt.Color(51, 51, 51));
        txtTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtTotal.setEnabled(false);
        txtTotal.setVerifyInputWhenFocusTarget(false);
        panelLateralDerecho.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 120, 20));

        lblSize3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblSize3.setForeground(new java.awt.Color(51, 51, 51));
        lblSize3.setText("Id proveedor");
        panelLateralDerecho.add(lblSize3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, 20));

        txtIdProveedor.setForeground(new java.awt.Color(51, 51, 51));
        txtIdProveedor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtIdProveedor.setVerifyInputWhenFocusTarget(false);
        txtIdProveedor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtIdProveedorCaretUpdate(evt);
            }
        });
        panelLateralDerecho.add(txtIdProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 120, 20));

        lblSize4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lblSize4.setForeground(new java.awt.Color(51, 51, 51));
        lblSize4.setText("Proveedor");
        panelLateralDerecho.add(lblSize4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, -1, 20));

        txtProveedor.setForeground(new java.awt.Color(51, 51, 51));
        txtProveedor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        txtProveedor.setEnabled(false);
        txtProveedor.setVerifyInputWhenFocusTarget(false);
        panelLateralDerecho.add(txtProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 130, 20));

        btnEliminar.setBackground(new java.awt.Color(255, 0, 0));
        btnEliminar.setText("Eliminar");
        btnEliminar.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });
        panelLateralDerecho.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 100, 40));

        content.add(panelLateralDerecho, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 180, 250, 390));

        lblFecha.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha.setText("Fecha:");
        content.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 590, -1, -1));

        lblPrecioTotalCompra.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        lblPrecioTotalCompra.setForeground(new java.awt.Color(255, 255, 255));
        lblPrecioTotalCompra.setText("Precio Total Compra: ");
        content.add(lblPrecioTotalCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, -1, -1));

        lblTotal.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(51, 255, 51));
        lblTotal.setText("0.00");
        content.add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 590, 250, 20));

        lblIdCompra.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        lblIdCompra.setForeground(java.awt.Color.white);
        lblIdCompra.setText("ID:");
        content.add(lblIdCompra, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 590, -1, -1));

        lblIdCompraG.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        lblIdCompraG.setForeground(new java.awt.Color(51, 255, 51));
        content.add(lblIdCompraG, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 590, 210, 20));

        add(content, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 620));
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecioCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioCompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioCompraActionPerformed

    private void txtCantidadEntradaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCantidadEntradaCaretUpdate

        // TODO add your handling code here:
        actualizarTxt();
            
    }//GEN-LAST:event_txtCantidadEntradaCaretUpdate

    private void txtPrecioCompraCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPrecioCompraCaretUpdate
        // TODO add your handling code here:
        actualizarTxt();
    }//GEN-LAST:event_txtPrecioCompraCaretUpdate

    private void txtIdProductoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtIdProductoCaretUpdate
        // TODO add your handling code here:
        checkIdProducto();
    }//GEN-LAST:event_txtIdProductoCaretUpdate

    private void txtIdProveedorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtIdProveedorCaretUpdate
        // TODO add your handling code here:
        checkIdProveedor();
    }//GEN-LAST:event_txtIdProveedorCaretUpdate

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked
        // TODO add your handling code here:
        boolean existe = comprobarProductoProveedor();
        
        if(existe)
        {
            Boolean agregado = agregar();
            
            if(agregado)
            {
                limpiar();
                txtIdProveedor.setEnabled(false);
            }
        }
        
    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        // TODO add your handling code here:
        int index = tableProductos.getSelectedRow();
        
        if(index != -1)
        {
            DefaultTableModel model = (DefaultTableModel) tableProductos.getModel();
            Float total = Float.valueOf(lblTotal.getText());
            Float precioCompra =  (Float) model.getValueAt(index, 4);

            int cantidad =  (int) model.getValueAt(index, 3);


            Float monto = precioCompra * cantidad;
            String totalC = String.format("%.2f", (total - monto));

            lblTotal.setText(totalC.replace(",", "."));
            model.removeRow(index);
            
            tableProductos.setModel(model);
        }else{
            JOptionPane.showMessageDialog(content, "Elija una fila para eliminarla");
        }
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void btnRellenarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRellenarMouseClicked
        
         int option2 = JOptionPane.showConfirmDialog(this, "¿Quieres pagas en plazos?", "Pago a plazos.", JOptionPane.YES_NO_OPTION);
            
            if(option2 == JOptionPane.YES_OPTION)
            {
                generarCompra();
                generarDeuda();
            }else
            {
               generarCompra();
               generarGasto();

            }  
            
        pdi.actualizarTabla();
        limpiarPestaña();
        generarIdCompra();
        // actualizarTabla();

    }//GEN-LAST:event_btnRellenarMouseClicked

    private void btnRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRellenarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRellenarActionPerformed

    private void actualizarTxt()
    {
                try{
            int cantidad = Integer.parseInt(txtCantidadEntrada.getText());
            float precioC = Float.parseFloat(txtPrecioCompra.getText());
            if(cantidad > 0 && precioC > 0)
            {
                
             String total = String.format("%.2f", (cantidad * precioC));
            txtTotal.setText(total.replace(",", "."));
            }else
            {
                txtTotal.setText("Monto invalido");
            }
            
        }catch(Exception e)
        {
            System.out.println(e);
        }
    }
    
     private void checkIdProducto(){
        String idProducto = txtIdProducto.getText();
        // String consulta = "SELECT descripcion, size, precioU FROM producto WHERE id = ?";
        ProductoDAO pdo = new ProductoDAOImpl();
        
        try {
            
            Producto p = pdo.get(idProducto);
            if(p != null)
            {
                txtDescripcion.setText(p.getNombre());
                txtSize.setText(p.getSize());
            }else
            {
            txtDescripcion.setText("Prod no encontrado");
            txtSize.setText("");
            }


        } catch (SQLException ex) {
            System.out.println(ex);
        }
     }
     
      private void checkIdProveedor(){
        String idProveedor = txtIdProveedor.getText();
          ProveedorDAO pdo = new ProveedorDAOImpl();
        
        try {
            
            Proveedor pr = pdo.get(idProveedor);
            if(pr != null)
            {
                txtProveedor.setText(pr.getNombre());
            }else
            {
                txtProveedor.setText("");
            }


        } catch (SQLException ex) {
           
            System.out.println(ex);
        }
     }
      
      private boolean agregar()
    {
        Boolean agregado = false;
        String idProd = txtIdProducto.getText();
       String descripcion = txtDescripcion.getText();
       String size = txtSize.getText();
       int cantidad = 0;
       float precioCompra = 0;
       String idProveedor = txtIdProveedor.getText();
       String proveedor = txtProveedor.getText();
        System.out.println(idExiste(idProd));
       if(idExiste(idProd) == false)
       {
                try{
                cantidad = Integer.parseInt(txtCantidadEntrada.getText());
                precioCompra = Float.parseFloat(txtPrecioCompra.getText());
                
                if(cantidad < 0 || precioCompra < 0)
                {
                    JOptionPane.showMessageDialog(null, "No puede añadir negativos en los campos de cantidad y precio");

                }else{
                    if(!idProd.isEmpty() && !idProveedor.isEmpty() && cantidad != 0 && precioCompra != 0)
                     {

                        DefaultTableModel model = (DefaultTableModel) tableProductos.getModel();

                        Object[] row = {idProd,descripcion,size,cantidad,precioCompra,idProveedor,proveedor};

                        model.addRow(row);
                                 Float totalActual = Float.valueOf(lblTotal.getText());

                                String total = String.format("%.2f", (cantidad * precioCompra + totalActual));

                         lblTotal.setText(total.replace(",", "."));
                         
                         agregado = true;

                     } else{
                         JOptionPane.showMessageDialog(null, "Complete los campos");
                         agregado = false;

                    }
                }

           }catch(Exception e)
           {
               JOptionPane.showMessageDialog(null, "Ingrese correctamente los campos");
               System.out.println(e);
                 agregado = false;
           }
       }else{
             JOptionPane.showMessageDialog(null, "Ya tiene este producto en la lista");
              agregado = false;

       }
      
       return  agregado;
    }
      
      private boolean idExiste(String id)
      {
          boolean existe = false;
          for(int i = 0; i < tableProductos.getModel().getRowCount(); i++)
          {
              String idTabla = (String) tableProductos.getModel().getValueAt(i, 0);
              if(id.equals(idTabla))
              {
                  existe = true;
                  break;
                  
              }
              else{
                  existe = false;
              }
          }
          return existe;
      }
      
      private void limpiar()
      {
          txtCantidadEntrada.setText("");
          txtPrecioCompra.setText("");
          txtDescripcion.setText("");
          txtIdProducto.setText("");
          txtSize.setText("");
          txtTotal.setText("");
                                        
      }
      
      private void limpiarPestaña()
      {
          lblTotal.setText("0.00");
          txtCantidadEntrada.setText("");
          txtPrecioCompra.setText("");
          txtDescripcion.setText("");
          txtIdProducto.setText("");
          txtSize.setText("");
          txtTotal.setText("");
          txtIdProveedor.setText("");
          txtProveedor.setText("");
          txtIdProveedor.setEnabled(true);
          
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime fecha = LocalDateTime.now();
       
            lblFecha.setText("Fecha: " + formatter.format(fecha));
          
          DefaultTableModel model = (DefaultTableModel) tableProductos.getModel();
          
            int rowCount = model.getRowCount();
           for (int row = rowCount - 1; row >= 0; row--) {
               model.removeRow(row);
           }

      }
      
      private boolean comprobarProductoProveedor()
      {
           boolean existe = false;

          String idProd = txtIdProducto.getText();
          
          if(!idProd.isEmpty())
          {
                try {
                    String query = "select idProducto, idProveedor from detalleProducto where idProducto = ? and idProveedor = ?";
                    Connection c = Conexion.conectar();
                    PreparedStatement stm = c.prepareStatement(query);
                    stm.setString(1, txtIdProducto.getText());
                    stm.setString(2, txtIdProveedor.getText());

                   ResultSet rs = stm.executeQuery();

                   if(!rs.next())
                   {
                       int option = JOptionPane.showConfirmDialog(null, "Ese proveedor no proporciona ese producto. Desea registrarlo?");

                       if(option == JOptionPane.YES_OPTION)
                       {
                            String query2 = "insert into detalleProducto(idProducto,idProveedor) values (?,?)";
                            PreparedStatement stm2 = c.prepareStatement(query2);
                            stm2.setString(1, txtIdProducto.getText());
                            stm2.setString(2, txtIdProveedor.getText());

                            stm2.execute();

                            existe = true;
                       }else{
                           JOptionPane.showMessageDialog(null, "Se cancelo el registro");
                           existe = false;
                       }
                   }else
                   {
                       existe = true;

                   }

                } catch (SQLException ex) {
                    Logger.getLogger(PanelRellenarInventario.class.getName()).log(Level.SEVERE, null, ex);
                }

          }
           return existe;

      }
      
      
      private void generarCompra()
    {
      
            String compraQuery = "INSERT INTO compra (id, idProveedor, total, fecha) VALUES (?,?,?,?)";
            
            String detalleCompraQuery = "INSERT INTO detallecompra (idCompra, idProducto, cantidadP,precioCompra) VALUES (?,?,?,?)";
       try {  
            Connection c = Conexion.conectar();
            
            
            try {
                c.setAutoCommit(false);
                
                PreparedStatement pst = c.prepareStatement(compraQuery);
                
                pst.setString(1, lblIdCompraG.getText());
                pst.setString(2, txtIdProveedor.getText());
                pst.setFloat(3, Float.parseFloat(lblTotal.getText()));
                pst.setTimestamp(4, Timestamp.valueOf(fecha));
                pst.executeUpdate();
                
                DefaultTableModel model = (DefaultTableModel) tableProductos.getModel();
                for (int row = 0; row < model.getRowCount(); row++) {
                    String productoID = (String) model.getValueAt(row, 0);
                    int cantidad = (int) model.getValueAt(row, 3);
                    float precioCompra = (float) model.getValueAt(row, 4);
                    
                    PreparedStatement pst3 = c.prepareStatement(detalleCompraQuery);
                    pst3.setString(1, lblIdCompraG.getText());
                    pst3.setString(2, productoID);
                    pst3.setInt(3, cantidad);
                    pst3.setFloat(4, precioCompra);
                    pst3.executeUpdate();
                }
 
            
                c.commit();
            } catch (SQLException ex) {
                Logger.getLogger(PanelRellenarInventario.class.getName()).log(Level.SEVERE, null, ex);
                
                c.rollback();
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PanelRellenarInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    
    private void generarDeuda()
    {
        String deudaQuery = "INSERT INTO cuentaporpagar (idCompra,idProveedor, deuda,totalFaltante, fecha) VALUES (?,?,?,?,?)";

        
            try {
                Connection c = Conexion.conectar();
                
                PreparedStatement pst = c.prepareStatement(deudaQuery);
                
                pst.setString(1, lblIdCompraG.getText());
                pst.setString(2, txtIdProveedor.getText());
                pst.setFloat(3, Float.parseFloat(lblTotal.getText()));
                pst.setFloat(4, Float.parseFloat(lblTotal.getText()));
                pst.setTimestamp(5, Timestamp.valueOf(fecha));
                pst.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(PanelRellenarInventario.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
     }
    
    
    private void generarGasto()
    {
         String deudaQuery = "INSERT INTO gastos (concepto,monto, fecha) VALUES (?,?,?)";
         String concepto = "Compra a " + txtProveedor.getText();
        
            try {
                Connection c = Conexion.conectar();
                
                PreparedStatement pst = c.prepareStatement(deudaQuery);
                
                pst.setString(1, concepto);
                pst.setFloat(2, Float.parseFloat(lblTotal.getText()));
                pst.setTimestamp(3, Timestamp.valueOf(fecha));

                pst.executeUpdate();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(PanelRellenarInventario.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
    }
    
   private void generarIdCompra()
   {
       String idCompra = UniqueIDGenerator.generateUniqueID();
        lblIdCompraG.setText(idCompra);
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonRectangle btnAgregar;
    private rojerusan.RSMaterialButtonRectangle btnEliminar;
    private rojerusan.RSMaterialButtonRectangle btnRellenar;
    private javax.swing.JPanel content;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblId1;
    private javax.swing.JLabel lblIdCompra;
    private javax.swing.JLabel lblIdCompraG;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNombre1;
    private javax.swing.JLabel lblPrecio1;
    private javax.swing.JLabel lblPrecio2;
    private javax.swing.JLabel lblPrecioTotalCompra;
    private javax.swing.JLabel lblSize1;
    private javax.swing.JLabel lblSize2;
    private javax.swing.JLabel lblSize3;
    private javax.swing.JLabel lblSize4;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelLateralDerecho;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtCantidadEntrada;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtIdProveedor;
    private javax.swing.JTextField txtPrecioCompra;
    private javax.swing.JTextField txtProveedor;
    private javax.swing.JTextField txtSize;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
