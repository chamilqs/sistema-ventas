/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Inventario.DetalleInventario;

import Connect.Conexion;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author baez_
 */
public class PanelDetalleInventario extends javax.swing.JPanel {

    /**
     * Creates new form PanelDetalleInventario
     */
    public PanelDetalleInventario() {
        initComponents();
        
       actualizarTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        txtBusqueda = new javax.swing.JTextField();
        ComboFecha = new javax.swing.JComboBox<>();
        BtnBuscarCCobrar1 = new rojerusan.RSMaterialButtonRectangle();
        BtnReload = new rojerusan.RSMaterialButtonRectangle();
        LblUtilidad4 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        content.setBackground(java.awt.Color.white);
        content.setPreferredSize(new java.awt.Dimension(1005, 618));
        content.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "IdProducto", "Descripcion", "Tamaño", "Entrada", "Salida", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableProductos);
        if (tableProductos.getColumnModel().getColumnCount() > 0) {
            tableProductos.getColumnModel().getColumn(0).setResizable(false);
            tableProductos.getColumnModel().getColumn(1).setResizable(false);
            tableProductos.getColumnModel().getColumn(2).setResizable(false);
            tableProductos.getColumnModel().getColumn(3).setResizable(false);
            tableProductos.getColumnModel().getColumn(4).setResizable(false);
            tableProductos.getColumnModel().getColumn(5).setResizable(false);
        }

        content.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 980, 480));

        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });
        content.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 100, 130, -1));

        ComboFecha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Descripcion", "Tamaño" }));
        content.add(ComboFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, -1, -1));

        BtnBuscarCCobrar1.setText("Buscar");
        BtnBuscarCCobrar1.setFont(new java.awt.Font("Roboto Medium", 1, 12)); // NOI18N
        BtnBuscarCCobrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBuscarCCobrar1ActionPerformed(evt);
            }
        });
        content.add(BtnBuscarCCobrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 90, 80, 40));

        BtnReload.setBackground(new java.awt.Color(51, 204, 0));
        BtnReload.setText("Reload");
        BtnReload.setFont(new java.awt.Font("Roboto Medium", 1, 12)); // NOI18N
        BtnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReloadActionPerformed(evt);
            }
        });
        content.add(BtnReload, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, 100, 40));

        LblUtilidad4.setBackground(new java.awt.Color(255, 255, 255));
        LblUtilidad4.setFont(new java.awt.Font("Montserrat", 1, 36)); // NOI18N
        LblUtilidad4.setForeground(new java.awt.Color(0, 112, 192));
        LblUtilidad4.setText("Detalle Inventario");
        content.add(LblUtilidad4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        add(content, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped
        char teclapress =evt.getKeyChar();

        if(teclapress == KeyEvent.VK_ENTER){
            busqueda();

        }
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void BtnBuscarCCobrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBuscarCCobrar1ActionPerformed
        busqueda();
    }//GEN-LAST:event_BtnBuscarCCobrar1ActionPerformed

    private void BtnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReloadActionPerformed
        actualizarTabla();
        txtBusqueda.setText("");
    }//GEN-LAST:event_BtnReloadActionPerformed

    public void actualizarTabla()
    {
        DefaultTableModel model = new DefaultTableModel();
        
        try {
            Connection cn = Conexion.conectar();
            Statement stm = cn.createStatement();
            
            ResultSet rs = stm.executeQuery("select i.idProducto,p.descripcion,p.size as Tamaño,i.entrada,i.salida,i.stock from Inventario as i "
                                               + "inner join Producto as p on p.id = i.idProducto");
            
            //RELLENADO DE LAS COLUMNAS
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            for (int column = 1; column <= columnCount; column++) {
                 model.addColumn(metaData.getColumnLabel(column));
             }

            //RELLENADO DE LAS FILAS
            while (rs.next()) {
                 Object[] rowData = new Object[columnCount];
                 for (int column = 1; column <= columnCount; column++) {
                     rowData[column - 1] = rs.getObject(column);
                 }
                 model.addRow(rowData);
             }
            
            tableProductos.setModel(model);
            
        } catch (SQLException ex) {
            Logger.getLogger(PanelDetalleInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void busqueda() {
     try {
         DefaultTableModel modelo = new DefaultTableModel() {
             @Override
             public boolean isCellEditable(int row, int column) {
                 return false; // Evitar que las celdas sean editables, lo hice por code no deja el properies
             }
         };

         String seleccion = (String) ComboFecha.getSelectedItem(); // Obtener la opción seleccionada del combo box

         String query = ""; // Inicializar la consulta
         switch (seleccion) {
             case "ID" -> {
                 String id = txtBusqueda.getText();
                 query = "select i.idProducto,p.descripcion,p.size as Tamaño,i.entrada,i.salida,i.stock from Inventario as i "
                         + "inner join Producto as p on p.id = i.idProducto"
                         + " WHERE i.idProducto = '" + id + "'";
             }
             case "Descripcion" -> {
                 String descripcion = txtBusqueda.getText();
                 query = "select i.idProducto,p.descripcion,p.size as Tamaño,i.entrada,i.salida,i.stock from Inventario as i "
                         + "inner join Producto as p on p.id = i.idProducto"
                         + " where p.descripcion = '" + descripcion + "'";
             }
             case "Tamaño" -> {
                 String size = txtBusqueda.getText();
                 query = "select i.idProducto,p.descripcion,p.size as Tamaño,i.entrada,i.salida,i.stock from Inventario as i "
                         + "inner join Producto as p on p.id = i.idProducto"
                         + " where p.size = '" + size + "'";
             }
             default -> {
             }
         }

         try (Connection connection = Conexion.conectar();
              Statement statement = connection.createStatement();
              ResultSet resultSet = statement.executeQuery(query)) {

             ResultSetMetaData metaData = resultSet.getMetaData();
             int columnCount = metaData.getColumnCount();

             // Agregar nombres de columnas al modelo
             for (int column = 1; column <= columnCount; column++) {
                 modelo.addColumn(metaData.getColumnLabel(column));
             }

             // Agregar filas al modelo
             while (resultSet.next()) {
                 Object[] rowData = new Object[columnCount];
                 for (int column = 1; column <= columnCount; column++) {
                     rowData[column - 1] = resultSet.getObject(column);
                 }
                 modelo.addRow(rowData);
             }
         }

         tableProductos.setModel(modelo);
     } catch (SQLException ex) {
         Logger.getLogger(PanelDetalleInventario.class.getName()).log(Level.SEVERE, null, ex);
     }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonRectangle BtnBuscarCCobrar1;
    private rojerusan.RSMaterialButtonRectangle BtnReload;
    private javax.swing.JComboBox<String> ComboFecha;
    private javax.swing.JLabel LblUtilidad4;
    private javax.swing.JPanel content;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtBusqueda;
    // End of variables declaration//GEN-END:variables
}
